package br.com.codecompany.rysys.core.driver;import br.com.codecompany.rysys.util.CheckUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public abstract class AbstractConnectionDriver implements ConnectionDriver {    private static Logger log = LoggerFactory.getLogger(AbstractConnectionDriver.class);	private String hostname;	private String password;	private Integer port;	private Integer timeout;	private Integer pingFrequency;	private String username;	public String getHostname() {		CheckUtils.checkNull(log, this, "hostname", hostname);		return hostname;	}	public void setHostname(String hostname) {		CheckUtils.checkNull(log, this, "hostname", hostname);		this.hostname = hostname;	}	public String getPassword() {		CheckUtils.checkNull(log, this, "password", password);		return password;	}	public void setPassword(String password) {		CheckUtils.checkNull(log, this, "password", password);		this.password = password;	}	public Integer getPort() {		CheckUtils.checkNull(log, this, "port", port);		return port;	}	public void setPort(Integer port) {		CheckUtils.checkNull(log, this, "port", port);		this.port = port;	}	public Integer getTimeout() {		CheckUtils.checkNull(log, this, "timeout", timeout);		return timeout;	}	public void setTimeout(Integer timeout) {		CheckUtils.checkNull(log, this, "timeout", timeout);		this.timeout = timeout;	}		public Integer getPingFrequency() {		CheckUtils.checkNull(log, this, "pingFrequency", pingFrequency);		return pingFrequency;	}	public void setPingFrequency(Integer pingFrequency) {		CheckUtils.checkNull(log, this, "pingFrequency", pingFrequency);		this.pingFrequency = pingFrequency;	}		public String getUsername() {		CheckUtils.checkNull(log, this, "username", username);		return username;	}	public void setUsername(String username) {		CheckUtils.checkNull(log, this, "username", username);		this.username = username;	}	@Override	public int hashCode() {		final int prime = 31;		int result = 1;		result = prime * result				+ ((hostname == null) ? 0 : hostname.hashCode());		result = prime * result				+ ((password == null) ? 0 : password.hashCode());		result = prime * result + port;		result = prime * result				+ ((username == null) ? 0 : username.hashCode());		return result;	}	@Override	public boolean equals(Object obj) {		if (this == obj)			return true;		if (obj == null)			return false;		if (getClass() != obj.getClass())			return false;		AbstractConnectionDriver other = (AbstractConnectionDriver) obj;		if (hostname == null) {			if (other.hostname != null)				return false;		} else if (!hostname.equals(other.hostname))			return false;		if (password == null) {			if (other.password != null)				return false;		} else if (!password.equals(other.password))			return false;		if (port != other.port)			return false;		if (username == null) {			if (other.username != null)				return false;		} else if (!username.equals(other.username))			return false;		return true;	}}