package br.com.codecompany.rysys.fgl.util;import static br.com.codecompany.rysys.api.annotation.AnnotationConstants.INDEX;import static br.com.codecompany.rysys.util.Constants.PARAMETER_SEPARATOR;import br.com.codecompany.rysys.api.annotation.InvalidMessageFormatException;import br.com.codecompany.rysys.api.annotation.InvalidOrderException;import br.com.codecompany.rysys.api.function.Parameter;public class FglMessageUtils {    public static final Parameter[] parseParameters(String data) {        String[] elements = extractParameters(data);        Parameter[] result = new Parameter[elements.length];        for (int i = 0; i < elements.length; i++) {            String[] tokens = elements[i].split(PARAMETER_SEPARATOR);            result[i] = new Parameter(tokens[1], Integer.valueOf(tokens[0]));        }        return result;    }    // retorna um array com os parametros separados no    // formato {{tipo1;valor1},{tipo2;valor2}...}    private static String[] extractParameters(String text) {        String[] temp = text.split(PARAMETER_SEPARATOR);        String[] result = new String[temp.length / 2];        String param = "";        int j = 0;                for (int i = 0; i < temp.length; i++) {            if (i % 2 != 0) {                param += PARAMETER_SEPARATOR;            }                        param += temp[i];                        if (i % 2 != 0) {                if (param.contains(PARAMETER_SEPARATOR)) {                    result[j++] = param;                    param = "";                }            }        }        return result;    }    // retorna um array com os valores dos parametros no    // formato {valor1,valor2...}    private static String[] extractParameterValues(String text) {        String[] temp = text.split(PARAMETER_SEPARATOR);        // o array terah metade do tamanho pois cada elemento        // contem um tipo e um valor        String[] params = new String[temp.length / 2];        // cada parametro vem em um par: [tipo;valor]        if ((params.length > 1) && (params.length % 2) != 0) {            throw new InvalidMessageFormatException("Invalid format for message: '" +                    text + "'");        }        int j = 0;        for (int i = 0; i < temp.length; i++) {            if (i % 2 != 0) {                params[j++] = temp[i];            }        }        return params;    }    // retorna o valor do parametro de acordo com seu indice    public static final String getValueAt(String text, int index) {        if (index < 1) {            throw new InvalidOrderException("Attribute '" + INDEX + "' must be >= 1");        }        return extractParameterValues(text)[index - 1];    }}